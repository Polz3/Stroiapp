from starlette.middleware.base import BaseHTTPMiddleware
from starlette.requests import Request
from starlette.responses import Response, RedirectResponse
from urllib.parse import quote

class RedirectUnauthorizedMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next) -> Response:
        # üö´ –ù–µ —Ç—Ä–æ–≥–∞–µ–º —Å–∞–º—É —Å—Ç—Ä–∞–Ω–∏—Ü—É /login (—á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç)
        if request.url.path.startswith("/login"):
            return await call_next(request)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
        response = await call_next(request)

        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç ‚Äî HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å 401, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /login
        is_html_page = request.headers.get("accept", "").startswith("text/html")
        if response.status_code == 401 and is_html_page:
            next_path = quote(request.url.path)
            return RedirectResponse(url=f"/login?next={next_path}")

        return response
